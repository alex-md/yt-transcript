{"version":3,"sources":["components/TranscriptDisplay.tsx","utils/urlValidator.ts","components/YouTubePlayer.tsx","services/transcriptService.js","components/App.tsx","index.tsx"],"names":["TranscriptDisplay","_ref","transcript","highlightedWords","segments","setSegments","useState","useEffect","parsedSegments","split","filter","line","trim","map","timestampMatch","match","timestamp","text","replace","highlightText","length","regex","RegExp","join","part","index","some","word","toLowerCase","_jsx","className","children","segment","_jsxs","validateYouTubeUrl","url","test","extractVideoId","YouTubePlayer","videoUrl","videoId","src","title","frameBorder","allow","allowFullScreen","fetchTranscript","async","Error","response","axios","get","parseTranscript","data","getTranscript","_xmlDoc$getElementsBy","texts","DOMParser","parseFromString","getElementsByTagName","childNodes","i","textNode","nodeName","element","start","getAttribute","textContent","formatTime","time","seconds","parseInt","minutes","Math","floor","secs","App","setVideoUrl","setTranscript","error","setError","loading","setLoading","searchTerm","setSearchTerm","setHighlightedWords","type","value","onChange","event","target","placeholder","onClick","fetchedTranscript","err","console","disabled","_Fragment","role","handleSearch","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.48436174.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\ninterface TranscriptDisplayProps {\n    transcript: string;\n    highlightedWords?: string[];\n}\n\ninterface TranscriptSegment {\n    text: string;\n    timestamp: string;\n}\n\nconst TranscriptDisplay: React.FC<TranscriptDisplayProps> = ({ transcript, highlightedWords = [] }) => {\n    const [segments, setSegments] = useState<TranscriptSegment[]>([]);\n\n    useEffect(() => {\n        // Parse the transcript string into segments\n        const parsedSegments = transcript\n            .split('\\n')\n            .filter(line => line.trim() !== '')\n            .map(line => {\n                const timestampMatch = line.match(/\\[([\\d:]+)\\]/);\n                const timestamp = timestampMatch ? timestampMatch[1] : '0:00';\n                const text = line.replace(/\\[[\\d:]+\\]\\s*/, '').trim();\n                return { timestamp, text };\n            });\n\n        setSegments(parsedSegments);\n    }, [transcript]);\n\n    const highlightText = (text: string) => {\n        if (!highlightedWords.length) return text;\n\n        const regex = new RegExp(`(${highlightedWords.join('|')})`, 'gi');\n        const parts = text.split(regex);\n\n        return parts.map((part, index) =>\n            highlightedWords.some(word => word.toLowerCase() === part.toLowerCase())\n                ? <mark key={index} className=\"bg-warning text-dark px-1 rounded\">{part}</mark>\n                : part\n        );\n    };\n\n    return (\n        <div className=\"transcript-container\">\n            {segments.length === 0 ? (\n                <div className=\"alert alert-info\">No transcript content available.</div>\n            ) : (\n                <div className=\"list-group\">\n                    {segments.map((segment, index) => (\n                        <div key={index} className=\"list-group-item list-group-item-action d-flex py-3 border-0 border-bottom\">\n                            <div className=\"timestamp badge bg-secondary text-white align-self-start me-3 px-2 py-1 rounded-pill\">\n                                {segment.timestamp}\n                            </div>\n                            <div className=\"transcript-text flex-grow-1 fw-light\">\n                                {highlightText(segment.text)}\n                            </div>\n                        </div>\n                    ))}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default TranscriptDisplay;\n","export const isValidYouTubeUrl = (url: string): boolean => {\n    const youtubeUrlPattern = /^(https?:\\/\\/)?(www\\.)?(youtube\\.com|youtu\\.?be)\\/.+$/;\n    return youtubeUrlPattern.test(url);\n};\n\nexport const validateYouTubeUrl = isValidYouTubeUrl;\n\nexport const extractVideoId = (url: string): string | null => {\n    // For regular YouTube URLs (youtube.com)\n    let match = url.match(/[?&]v=([^&]+)/);\n    if (match) return match[1];\n\n    // For shortened YouTube URLs (youtu.be)\n    match = url.match(/youtu\\.be\\/([^?&]+)/);\n    if (match) return match[1];\n\n    // For embed URLs\n    match = url.match(/embed\\/([^/?&]+)/);\n    if (match) return match[1];\n\n    return null;\n};\n","import React from 'react';\nimport { extractVideoId } from '../utils/urlValidator';\n\ninterface YouTubePlayerProps {\n    videoUrl: string;\n}\n\nconst YouTubePlayer: React.FC<YouTubePlayerProps> = ({ videoUrl }) => {\n    const videoId = extractVideoId(videoUrl);\n\n    if (!videoId) {\n        return <div className=\"alert alert-warning\">Invalid YouTube URL</div>;\n    }\n\n    return (\n        <div className=\"ratio ratio-16x9\">\n            <iframe\n                src={`https://www.youtube.com/embed/${videoId}?enablejsapi=1`}\n                title=\"YouTube video player\"\n                frameBorder=\"0\"\n                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                allowFullScreen\n            ></iframe>\n        </div>\n    );\n};\n\nexport default YouTubePlayer;\n","import axios from \"axios\"\nimport { extractVideoId } from \"../utils/urlValidator\"\n\nconst YOUTUBE_API_KEY = \"AIzaSyAt8PgT4NitpGvgiuKNvl4CNbvQrNPdcQI\"\nexport const isCaptionsEnabled = async videoId => {\n    const response = await axios.get(\n        `https://www.googleapis.com/youtube/v3/captions?videoId=${videoId}&key=${YOUTUBE_API_KEY}`\n    )\n    return response.data.items && response.data.items.length > 0\n}\n\nexport const getTranscript = async videoId => {\n    const response = await axios.get(\n        `https://video.google.com/timedtext?lang=en&v=${videoId}`\n    )\n    const transcript = parseTranscript(response.data)\n    return transcript\n}\n\nexport const fetchTranscript = async videoUrl => {\n    const videoId = extractVideoId(videoUrl)\n    if (!videoId) {\n        throw new Error(\"Invalid YouTube URL\")\n    }\n\n    return getTranscript(videoId)\n}\n\nconst parseTranscript = data => {\n    const parser = new DOMParser()\n    const xmlDoc = parser.parseFromString(data, \"text/xml\")\n    const texts = xmlDoc.getElementsByTagName(\"body\")[0]?.childNodes\n\n    if (!texts) {\n        return \"No transcript available for this video.\"\n    }\n\n    let transcript = \"\"\n\n    for (let i = 0; i < texts.length; i++) {\n        const textNode = texts[i]\n        if (textNode.nodeName === \"s\") {\n            const element = textNode\n            const start = element.getAttribute(\"t\") || \"0\"\n            const duration = element.getAttribute(\"d\")\n            const text = textNode.textContent\n            transcript += `[${formatTime(start)}] ${text}\\n`\n        }\n    }\n\n    return transcript.trim() || \"No transcript available for this video.\"\n}\n\nconst formatTime = time => {\n    const seconds = parseInt(time, 10) / 1000\n    const minutes = Math.floor(seconds / 60)\n    const secs = Math.floor(seconds % 60)\n    return `${minutes}:${secs < 10 ? \"0\" : \"\"}${secs}`\n}\n","import React, { useState } from 'react';\nimport TranscriptDisplay from './TranscriptDisplay';\nimport YouTubePlayer from './YouTubePlayer';\nimport { validateYouTubeUrl } from '../utils/urlValidator';\nimport { fetchTranscript } from '../services/transcriptService';\n\nconst App: React.FC = () => {\n    const [videoUrl, setVideoUrl] = useState<string>('');\n    const [transcript, setTranscript] = useState<string>('');\n    const [error, setError] = useState<string>('');\n    const [loading, setLoading] = useState<boolean>(false);\n    const [searchTerm, setSearchTerm] = useState<string>('');\n    const [highlightedWords, setHighlightedWords] = useState<string[]>([]);\n\n    const handleUrlChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setVideoUrl(event.target.value);\n    };\n\n    const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setSearchTerm(event.target.value);\n    };\n\n    const handleSearch = () => {\n        if (searchTerm.trim()) {\n            setHighlightedWords(searchTerm.split(/\\s+/).filter(word => word.length > 0));\n        } else {\n            setHighlightedWords([]);\n        }\n    };\n\n    const handleFetchTranscript = async () => {\n        if (validateYouTubeUrl(videoUrl)) {\n            setLoading(true);\n            setError('');\n\n            try {\n                const fetchedTranscript = await fetchTranscript(videoUrl);\n                setTranscript(fetchedTranscript);\n                setError('');\n            } catch (err) {\n                setError('Failed to fetch transcript. Please try again.');\n                console.error(err);\n            } finally {\n                setLoading(false);\n            }\n        } else {\n            setError('Invalid YouTube URL. Please enter a valid URL.');\n        }\n    };\n\n    return (\n        <div className=\"container py-4\">\n            <div className=\"row justify-content-center\">\n                <div className=\"col-12 col-lg-10\">\n                    <div className=\"card shadow-lg border-0 rounded-3 mb-4\">\n                        <div className=\"card-header bg-primary text-white text-center p-3\">\n                            <h1 className=\"display-5 fw-bold\">\n                                <i className=\"bi bi-youtube me-2\"></i>\n                                YouTube Transcript Tool\n                            </h1>\n                        </div>\n                        <div className=\"card-body p-4\">\n                            <div className=\"mb-4\">\n                                <div className=\"input-group mb-3 shadow-sm\">\n                                    <span className=\"input-group-text bg-light\">\n                                        <i className=\"bi bi-link-45deg\"></i>\n                                    </span>\n                                    <input\n                                        type=\"text\"\n                                        className=\"form-control form-control-lg\"\n                                        value={videoUrl}\n                                        onChange={handleUrlChange}\n                                        placeholder=\"Enter YouTube video URL\"\n                                        aria-label=\"YouTube URL\"\n                                    />\n                                    <button\n                                        className={`btn ${loading ? 'btn-secondary' : 'btn-primary'} btn-lg`}\n                                        onClick={handleFetchTranscript}\n                                        disabled={loading}\n                                    >\n                                        {loading ?\n                                            <>\n                                                <span className=\"spinner-border spinner-border-sm me-2\" role=\"status\" aria-hidden=\"true\"></span>\n                                                Loading...\n                                            </> :\n                                            <>\n                                                <i className=\"bi bi-file-text me-2\"></i> Get Transcript\n                                            </>\n                                        }\n                                    </button>\n                                </div>\n                                {error && (\n                                    <div className=\"alert alert-danger mt-3\" role=\"alert\">\n                                        <i className=\"bi bi-exclamation-triangle-fill me-2\"></i>\n                                        {error}\n                                    </div>\n                                )}\n                            </div>\n\n                            {transcript && (\n                                <>\n                                    <div className=\"mb-4\">\n                                        <div className=\"input-group shadow-sm\">\n                                            <span className=\"input-group-text bg-light\">\n                                                <i className=\"bi bi-search\"></i>\n                                            </span>\n                                            <input\n                                                type=\"text\"\n                                                className=\"form-control\"\n                                                value={searchTerm}\n                                                onChange={handleSearchChange}\n                                                placeholder=\"Search in transcript\"\n                                                aria-label=\"Search term\"\n                                            />\n                                            <button\n                                                className=\"btn btn-outline-secondary\"\n                                                onClick={handleSearch}\n                                                type=\"button\"\n                                            >\n                                                <i className=\"bi bi-filter\"></i> Filter\n                                            </button>\n                                        </div>\n                                    </div>\n\n                                    <div className=\"card shadow-sm mb-4\">\n                                        <div className=\"card-header bg-light d-flex align-items-center\">\n                                            <i className=\"bi bi-play-btn me-2\"></i>\n                                            <h2 className=\"h5 mb-0\">Video Player</h2>\n                                        </div>\n                                        <div className=\"card-body p-0\">\n                                            <YouTubePlayer videoUrl={videoUrl} />\n                                        </div>\n                                    </div>\n\n                                    <div className=\"card shadow-sm\">\n                                        <div className=\"card-header bg-light d-flex align-items-center\">\n                                            <i className=\"bi bi-chat-quote me-2\"></i>\n                                            <h2 className=\"h5 mb-0\">Transcript</h2>\n                                            <span className=\"badge bg-primary ms-2\">\n                                                {highlightedWords.length > 0 ? 'Filtered' : 'Full'}\n                                            </span>\n                                        </div>\n                                        <div className=\"card-body\">\n                                            <TranscriptDisplay\n                                                transcript={transcript}\n                                                highlightedWords={highlightedWords}\n                                            />\n                                        </div>\n                                    </div>\n                                </>\n                            )}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n// Import Bootstrap CSS and JS\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min.js';\n// Import Bootstrap Icons\nimport 'bootstrap-icons/font/bootstrap-icons.css';\n// Import custom styles after Bootstrap\nimport './styles/App.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}